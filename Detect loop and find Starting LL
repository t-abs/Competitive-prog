//Algo- Used to detect a loop present in linked list or not.
Initialise with 2 pointers slow and fast.Move fast by 2 steps and slow by 1 step.If fast  meets slow then loop is present if fast reaches null no loop
(The Fast pointer again catches the slow pointer at some time therefore a loop exists in the linked list)
//
Node* floydDetectLoop(Node* head){
if(head==NULL){
return NULL;
}
Node *slow=head;
Node *fast=head;
while(slow!=NULL && fast!=NULL){
fast=fast->next;
if(fast!=NULL){
fast->fast->next;
}
slow->next;
if(slow==fast){
return slow;
}
}
return NULL;
}
//Find the starting node of LL
Node* getStartingNode(Node* head) {
if(head==NULL){
return NULL;
}
Node *intersection=floydDetectLoop(head);
if(intersection==NULL){
return NULL;
}
Node *slow=head;
while(slow!=intersection){
slow-=slow->next;
intersection=intersection->next;
}
return slow;
}

//Remove Loop
Node *removeloop(Node *head){
if(head==NULL){
return;
}
Node *getstartpoint=getStartingNode(head);
Node *temp=getstartpoint;
//keep traversing to next node till both point same node and then attach it to NULL pointer.
while(temp->next!=getstartpoint){
temp=temp->next;
}
temp->next=NULL;
return head;
}
