//Approach-Find the lowest common ancestor of node.So call left tree and right tree separately return then
LCA IN BST
TreeNode<int>* LCAinaBST(TreeNode<int>* root, TreeNode<int>* P, TreeNode<int>* Q){
//base case
if(root==NULL){
return NULL;
}
while(root!=NULL){

if(root->node<P->data && root->data<Q->data)
return LCAinaBST(root->right,P,Q);
else if(rooot->data>P->data && root->data>Q->data)
return LCAinaBST(root->left,P,Q);
else{
return root;
}
}
}
LCA IN BT=
int getLCA(BinaryTreeNode<int> *root, int a, int b)
{
    // Write your code here
    Node* lca(Node* root ,int n1 ,int n2 )
    {
       //base case
        if(root == NULL)
        {
            return NULL;
        }
        
        if(root->data == n1 || root->data == n2) 
        {
            return root;
        }
        
        Node* leftAns = lca(root->left, n1, n2);
        Node* rightAns = lca(root->right, n1, n2);
        
        if(leftAns != NULL && rightAns != NULL) 
        {
            return root;
        }
        else if(leftAns != NULL && rightAns == NULL)
            return leftAns;
        else if(leftAns == NULL && rightAns != NULL)
            return rightAns;
        else
            return NULL;
    }
};
