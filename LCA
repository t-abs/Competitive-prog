//Approach-Find the lowest common ancestor of node.So call left tree and right tree separately return then
LCA IN BST
TreeNode<int>* LCAinaBST(TreeNode<int>* root, TreeNode<int>* P, TreeNode<int>* Q){
//base case
if(root==NULL){
return NULL;
}
while(root!=NULL){

if(root->node<P->data && root->data<Q->data)
return LCAinaBST(root->right,P,Q);
else if(rooot->data>P->data && root->data>Q->data)
return LCAinaBST(root->left,P,Q);
else{
return root;
}
}
}
LCA IN BT=
int getLCA(BinaryTreeNode<int> *root, int a, int b)
{
    // Write your code here
    if (root == NULL)
        return -1;
    if (root->data == a || root->data == b)
        return root->data;

    int left = getLCA(root->left, a, b);
    int right = getLCA(root->right, a, b);

    if (left == -1 && right == -1)
        return -1;
    else if (left != -1 && right == -1)
        return left;
    else if (left == -1 && right != -1)
        return right;
    else
        return root->data;
}
