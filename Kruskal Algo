Algo-
1.First maintain a bool comparator for increasing or decreasing function
2.Sort the weights in increasing
3.Maintain a parent array to check that a cycle should not exist


//maintaining a bool comparator for increasing or decreasing order
bool compare(Edge e1,Edge e2){
return e1.weight<e2.weight;
}
int findparent(int v,int *parent){
if(parent[v]==v){
return v;
return findparent(parent[v],parent);
}
}
void minmst(Edge *input,int v,int e){
//sort based on weight
sort(input,input+e,compare);
Edge *output=new Edge[v-1];
int parent=new int[v];
for(int i=0;i<v;i++){
parent[i]=i;
}
int count=0;
int i=0;
while(count!=v-1){
 int currentedge[i]=input[i];
//checking if cycle there or not
int sourceparent=findparent(currentedge.source,parent);
int destparent=findparent(currentedge,dest,parent):
if(sourceparent!=destparent){
output[count]=currentedge;
count++;
parent[sourceparent]=destparent;
}
}
i++;
for(i=0;i<v;i++){
cout<<output[i].printedge;
}
}

VECTOR APPROACH-
#include<algorithm>
#include<vector>
bool cmp(vector<int> &a,vector<int> &b){
  return a[2]<b[2];
}

void makeSet(vector<int> &parent,vector<int> &rank,int n){
  for (int i = 0; i < n; i++) {
    parent[i] = i;
    rank[i] = 0;
  }
}
  int findParent(vector<int> &parent,int node){
    if(parent[node]==node){
      return node;
    }
    return parent[node]=findParent(parent,parent[node]);
  }
  void unionset(int u,int v,vector<int> &parent,vector<int> &rank){
    u=findParent(parent,u);
    v=findParent(parent,v);
    if(rank[u]<rank[v]){
      parent[u]=v;
    } else if (rank[v] < rank[u]) {
      parent[v] = u;

      rank[u++];
    }else{
      parent[v]=u;
    }
  }

int minimumSpanningTree(vector<vector<int>>& edges, int n)
{
  sort(edges.begin(),edges.end(),cmp);
vector<int>parent(n);
vector<int>rank(n);
makeSet(parent,rank,n);
int minweight=0;
for(int i=0;i<edges.size();i++){
  int u=findParent(parent,edges[i][0]);
  int v=findParent(parent,edges[i][1]);
  int wt=edges[i][2];
  if (u != v) {
    minweight += wt;
    unionset(u, v, parent, rank);
  }
}
return minweight;
}






    
